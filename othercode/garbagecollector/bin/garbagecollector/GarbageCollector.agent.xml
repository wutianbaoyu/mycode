<?xml version="1.0" encoding="UTF-8"?>
<!--
  <H3>Garbage collector agent.</H3>

  Runs a predefined way on the grid and searches for
  garbage. Whenever it sees garbage at its actual position
  it tries to pick it up and brings it to one of the available
  garbage burners (chosen randomly).
-->
<agent xmlns="http://www.activecomponents.org/jadex-bdi"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.activecomponents.org/jadex-bdi
	                    http://www.activecomponents.org/jadex-bdi-${jadex_build_version}.xsd"
	name="GarbageCollector"
	package="garbagecollector">

	<imports>
		<import>jadex.commons.future.*</import>
		<import>jadex.extension.envsupport.environment.space2d.*</import><!--界面塑造-->
		<import>jadex.extension.envsupport.environment.*</import>
		<import>jadex.extension.envsupport.math.*</import><!--数学运算怎样行动-->
		<import>jadex.bridge.IContextService</import>
	</imports>

	<beliefs>
		<!-- 环境 -->
		<belief name="env" class="Grid2D">
 			<fact>jadex.application.EnvironmentService.getSpace($component, "mygc2dspace").get()</fact>
 		</belief>
 		
 		<!-- Myself. -->
 		<belief name="myself" class="ISpaceObject">
 			<fact>$beliefbase.env.getAvatar($scope.getComponentDescription(), $scope.getAgentModel().getFullName())</fact>
 		</belief>

		<!-- 在格子世界的具体位置 -->
		<belief name="pos" class="IVector2" evaluationmode="push">
			<fact>
				$beliefbase.myself.position
			</fact>
 		</belief>

		<!-- 垃圾现在的位置. -->
		<beliefset name="garbages" class="ISpaceObject"/>

		<!-- When at least one piece of waste is present on the
			current position the actual position is perceived as dirty.
			 当至少一块垃圾在当前位置时，这块位置被确认为脏了-->
		<belief name="is_dirty" class="boolean" evaluationmode="push">
			<fact>
				$beliefbase.garbages.length>0
			</fact>
		</belief>
		
		<!-- Flag indicating if the agent currently carries garbage. 
		如果智能体现在携带了垃圾则做标志-->
		<belief name="has_garbage" class="boolean" evaluationmode="push">
 			<fact>
 				$beliefbase.myself.garbage!=null
			</fact>
		</belief>
	</beliefs>

	<goals>

		<!-- Goal for picking up a piece of waste, bringing it
			to some burner and going back. A new goal is created
 			whenever the actual position is dirty and there is no
 			burner present. 
 			目标位捡起一块垃圾，带这块垃圾到一些燃化炉并且会去，当确切的位置脏了并且没有
 			燃化炉的时候创建一个新目标（去拿）-->
		<achievegoal name="take">
			<unique/>
			<creationcondition>
				$beliefbase.is_dirty &amp;&amp; $beliefbase.env.getSpaceObjectsByGridPosition($beliefbase.pos, "burner")==null
			</creationcondition>
			<deliberation>
				<inhibits ref="check"/>
			</deliberation>
		</achievegoal>

		<!-- Goal for running around on the grid and
			searching for garbage. 
			在格子周围行动并且搜索垃圾-->
		<performgoal name="check" exclude="never"/>

		<!-- Goal for going to a specified position. 
		目标为前往指定的目标-->
		<achievegoal name="go">
			<parameter name="pos" class="IVector2"/>
		</achievegoal>

		<!-- The goal for picking up waste. Tries endlessly to pick up. 
		目标为捡起垃圾，不停地尝试捡起-->
		<achievegoal name="pick" exclude="never" retrydelay="100">
 			<dropcondition>
 				!$beliefbase.is_dirty &amp;&amp; !$beliefbase.has_garbage
 			</dropcondition>
		</achievegoal>
	</goals>

	<plans>
		<!-- Plan for taking some waste, bringing it to a burner
			and going back. 
			计划去捡起一些垃圾，带到燃化炉并且返回-->
		<plan name="take_plan">
			<body class="TakePlanEnv"/>
			<trigger>
				<goal ref="take"/>
			</trigger>
		</plan>

		<!-- Plan for running on a predefined route and searching waste.
		计划前往指定的路线并且搜索垃圾 -->
		<plan name="checking_plan">
			<body class="CheckingPlanEnv"/>
			<trigger>
				<goal ref="check"/>
			</trigger>
		</plan>

		<!-- Plan for picking up some garbage. 
		计划去捡起一些垃圾-->
		<plan name="pickup_plan">
			<body class="PickUpPlanEnv"/>
			<trigger>
				<goal ref="pick"/>
			</trigger>
		</plan>

		<!-- Plan for going to a target position.
		计划去目标位置 -->
		<plan name="go_plan">
			<parameter name="pos" class="IVector2">
 				<goalmapping ref="go.pos"/>
			</parameter>
			<body class="GoPlanEnv"/>
			<trigger>
				<goal ref="go"/>
			</trigger>
		</plan>
	</plans>

	<properties>
		<!-- The environment may throw exceptions when executing property listeners
			and these listeners are not valid any longer. This leads to normal plan
			failure and can therefore be ignored. 
			当执行性质的被命令者不合法时环境中或者会出现异常，这会导致正常的计划失败甚至会被忽略-->
			
		<!-- <property name="logging.level">java.util.logging.Level.WARNING</property> -->
		<property name="debugging">false</property>
    </properties>

	<configurations>
		<configuration name="default">
			<goals>
				<!-- Initial goal for searching for garbage.
				初始化目标去寻找垃圾 -->
				<initialgoal ref="check"/>			
			</goals>
		</configuration>
	</configurations>

</agent>